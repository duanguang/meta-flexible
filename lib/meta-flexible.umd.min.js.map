{"version":3,"file":"meta-flexible.umd.min.js","sources":["../src/index.js"],"sourcesContent":["(function (window, document, apiMetaFlexibleOptions) {\n  /**\n   * 方案枚举\n   */\n  const Plan = {\n    TargetDensityDpi: 0,\n    ScaleRatio: 1\n  };\n\n  /**\n   * 是否有生效, 用于判断当前方案是否真正生效\n   */\n  const Impact = {\n    Yes: 1,\n    No: -1,\n    Unknown: 0\n  };\n\n  /**\n   * 默认options\n   * @type {{namespace: string, designViewpoint: number, getMetaViewpointTargetDensityDpiContent: (function(*): string), getMetaViewpointScaleRatioContent: (function(*): string), isMobile: (function(): boolean), plans: [null,null], Plan: {TargetDensityDpi: number, ScaleRatio: number}, enableBodyFontSize: boolean}}\n   */\n  const defaultMetaFlexibleOptions = {\n    namespace: 'meta-flexible',\n    designViewpoint: 750,\n    getMetaViewpointTargetDensityDpiContent: (designViewpoint) => `width=${designViewpoint}, target-densitydpi=device-dpi, user-scalable=no, viewport-fit=cover`,\n    getMetaViewpointScaleRatioContent: (scale) => `width=device-width, initial-scale=${scale}, maximum-scale=${scale}, minimum-scale=${scale}, user-scalable=no, viewport-fit=cover`,\n    isMobile: () => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\n    plans: [Plan.TargetDensityDpi, Plan.ScaleRatio],\n    Plan,\n    enableBodyFontSize: false\n  };\n\n  /**\n   * 合并外部API Options\n   * @type {{namespace: string, designViewpoint: number, getMetaViewpointTargetDensityDpiContent: (function(*): string), getMetaViewpointScaleRatioContent: (function(*): string), isMobile: (function(): boolean), plans: [null,null], Plan: {TargetDensityDpi: number, ScaleRatio: number}, enableBodyFontSize: boolean}}\n   */\n  const metaFlexibleOptions = {...defaultMetaFlexibleOptions, ...apiMetaFlexibleOptions};\n\n  /**\n   * 拉取 meta TargetDensityDpiContent 模板\n   */\n  const getMetaViewpointTargetDensityDpiContent = metaFlexibleOptions.getMetaViewpointTargetDensityDpiContent;\n\n  /**\n   * 拉取 meta ScaleRatio 模板\n   * @param scale\n   * @returns {string}\n   */\n  const getMetaViewpointScaleRatioContent = metaFlexibleOptions.getMetaViewpointScaleRatioContent;\n\n  /**\n   * 命名空间\n   * @type {string}\n   */\n  const NAMESPACE = metaFlexibleOptions.namespace;\n\n  /**\n   * 错误前缀\n   * @type {string}\n   */\n  const LOG_PREFIX = NAMESPACE;\n\n  /**\n   * 设计稿大小\n   * @type {number}\n   */\n  const designViewpoint = metaFlexibleOptions.designViewpoint;\n\n  /**\n   * 拉取 document 元素\n   * @type {Element}\n   */\n  const docEl = document.documentElement;\n\n  // noinspection JSUnresolvedVariable\n  /**\n   * 判断当前 window dpr 比例，若无直接降级使用 1\n   * @type {*|number}\n   */\n  const dpr = window.devicePixelRatio || 1;\n\n  /**\n   * plan 列表\n   */\n  const plans = [Plan.TargetDensityDpi, Plan.ScaleRatio];\n\n  /**\n   * 条件判错函数\n   * @param condition 错误条件\n   * @param message\n   */\n  function invariant(condition, message) {\n    if (!condition) {\n      throw new Error(`${LOG_PREFIX}: ${message}`);\n    }\n  }\n\n  /**\n   * 条件警告函数\n   * @param condition 警告条件\n   * @param message 警告信息\n   */\n  function warn(condition, message) {\n    if (!condition) {\n      // eslint-disable-next-line no-console\n      console.warn(`${LOG_PREFIX}: ${message}`);\n    }\n  }\n\n  /**\n   * 判定页面中是否已经被手动设置 meta\n   */\n  function invariantMetaViewPoint() {\n    const metaViewPointElement = getMetaViewpointElement();\n    invariant(!metaViewPointElement, '在使用当前工具库时请勿使用自定义viewpoint meta. viewpoint meta 将会通过当前工具自动计算生成.');\n  }\n\n  /**\n   * 获取 meta viewpoint\n   */\n  function getMetaViewpointElement() {\n    return document.querySelector('meta[name=\"viewport\"]');\n  }\n\n  /**\n   * 设置 body 字体大小, 来自原本的 lib-flexible 源码, 作用暂未知\n   */\n  function setBodyFontSize() {\n    if (document.body) {\n      document.body.style.fontSize = (12 * dpr) + 'px';\n    } else {\n      document.addEventListener('DOMContentLoaded', setBodyFontSize);\n    }\n  }\n\n  /**\n   * 创建或更新 meta view point\n   * @param metaViewpoint {Element} - 如果传入的 metaViewpoint已经存在, 则直接更新即可\n   * @param content {String} - viewpoint 内容\n   * @returns {*}\n   */\n  function createOrUpdateMetaViewpoint(metaViewpoint, content) {\n    const isAppended = !!metaViewpoint;\n    if (isAppended) {\n      metaViewpoint.setAttribute('content', content);\n    } else {\n      if (!metaViewpoint) {\n        const metaViewpointElement = getMetaViewpointElement();\n        if (!metaViewpointElement) {\n          metaViewpoint = document.createElement('meta');\n          metaViewpoint.setAttribute('name', 'viewport');\n        } else {\n          metaViewpoint = metaViewpointElement;\n        }\n      }\n      metaViewpoint.setAttribute('content', content);\n      const headElement = docEl.querySelector('head');\n      if (headElement) {\n        headElement.appendChild(metaViewpoint);\n      } else {\n        const wrap = document.createElement('div');\n        wrap.appendChild(metaViewpoint);\n        document.write(wrap.innerHTML);\n      }\n    }\n    return metaViewpoint;\n  }\n\n  /**\n   * 设置 targetDensityDpi meta\n   */\n  const setMetaViewpointTargetDensityDpi = (() => {\n    let isAppended = false;\n    return () => {\n      if (!isAppended) {\n        createOrUpdateMetaViewpoint(void 0, getMetaViewpointTargetDensityDpiContent(designViewpoint));\n        isAppended = true;\n      }\n    };\n  })();\n\n  /**\n   * 设置 targetDensityDpi meta\n   */\n  const setMetaViewpointScaleRatio = (() => {\n    let metaViewpoint;\n    return (scale) => {\n      metaViewpoint = createOrUpdateMetaViewpoint(metaViewpoint, getMetaViewpointScaleRatioContent(scale));\n    };\n  })();\n\n  /**\n   * 应用响应式方案\n   */\n  const applyResponsePlan = (() => {\n    /**\n     * 客户端长度, 当判定长度一致时不进入该函数, 从而减少计算\n     */\n    let clientWidth;\n    /**\n     * 是否生效,默认情况下是No\n     */\n    let hasImpact = Impact.No;\n    return () => {\n      if (clientWidth !== docEl.clientWidth) {\n        clientWidth = docEl.clientWidth;\n        /**\n         * 如果已经发现当前方案已生效, 直接使用当前方案即可, 不再继续尝试后续方案\n         */\n        if (hasImpact === Impact.Yes) {\n          /**\n           * 第一个方案作为当前使用方案\n           */\n          implementPlan(plans[0]);\n          return;\n        }\n        while (hasImpact === Impact.No) {\n          /**\n           * 如果所有方案失效, 直接抛异常, 用于上报, 但保留最后一种方案\n           */\n          if (plans.length <= 0) {\n            setTimeout(() => invariant(false, `${NAMESPACE}所使用的所有方案失效, 暂用最后一种方案兜底`), 0);\n            break;\n          }\n          /**\n           * 是否有生效\n           */\n          hasImpact = hasPlanImpact(() => implementPlan(plans[0]));\n          /**\n           * 如果发现方案失效, 直接抛弃方案列表第一项\n           */\n          if (hasImpact === Impact.No) {\n            plans.shift();\n          }\n        }\n        /**\n         * 当是否生效是未知时, 如: 当前页面大小完全等于预设的值 (设计稿大小), 那么无法判断是否生效\n         * 当出现以上情况时, 重置 hasImpact = 无效, 让下一轮再次触发当前函数时在判定\n         */\n        hasImpact === Impact.Unknown && (hasImpact = Impact.No);\n      }\n    };\n  })();\n\n  /**\n   * 方案具体实现函数, 根据枚举选择方案\n   */\n  function implementPlan(currentPlan) {\n    switch (currentPlan) {\n      case Plan.TargetDensityDpi:\n        targetDensityDpiImpl();\n        break;\n      case Plan.ScaleRatio:\n        scaleRatioImpl();\n        break;\n      default:\n        invariant(false, `未知 meta-flexible 方案, plan = ${currentPlan}`);\n    }\n  }\n\n  /**\n   * target density dpi 具体实现\n   */\n  function targetDensityDpiImpl() {\n    setMetaViewpointTargetDensityDpi();\n  }\n\n  /**\n   * target density dpi 具体实现\n   */\n  function scaleRatioImpl() {\n    const width = window.screen.width;\n    let scale = width / designViewpoint;\n    scale > 1 && (scale = 1);\n    setMetaViewpointScaleRatio(scale);\n  }\n\n  /**\n   * 检查发现支持0.5px\n   */\n  function tryAddHairLine() {\n    if (dpr >= 2) {\n      const fakeBody = document.createElement('body');\n      const testElement = document.createElement('div');\n      testElement.style.border = '.5px solid transparent';\n      fakeBody.appendChild(testElement);\n      docEl.appendChild(fakeBody);\n      if (testElement.offsetHeight === 1) {\n        docEl.classList.add('hairlines');\n      }\n      docEl.removeChild(fakeBody);\n    }\n  }\n\n  /**\n   * 方案是否有生效\n   * @param action\n   */\n  function hasPlanImpact(action) {\n    const clientWidthBeforeMeta = docEl.clientWidth;\n    action();\n    const clientWidthAfterMeta = docEl.clientWidth;\n    if (getScreenWidth() === designViewpoint) {\n      return Impact.Unknown;\n    }\n    return clientWidthAfterMeta === clientWidthBeforeMeta ? Impact.No : Impact.Yes;\n  }\n\n  /**\n   * 获取当前屏幕宽度\n   * @returns {Number}\n   */\n  function getScreenWidth() {\n    return window.screen.width;\n  }\n\n  (function () {\n\n    const {enableBodyFontSize, isMobile} = metaFlexibleOptions;\n\n    if (!isMobile()) {\n      warn(false, `请确保在移动端下使用${NAMESPACE}`);\n      return;\n    }\n\n    /**\n     * 校验判断 meta viewpoint, 禁止开发者手动添加\n     */\n    invariantMetaViewPoint();\n\n    if (enableBodyFontSize) {\n      /**\n       * 立即自执行, 设置 body font size\n       */\n      setBodyFontSize();\n    }\n    /**\n     * 直接触发页面\n     */\n    applyResponsePlan();\n\n    /**\n     * 在页面大小变更时触发更新\n     */\n    window.addEventListener('resize', (function () {\n      let timeoutId;\n      return () => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(applyResponsePlan, 300);\n      };\n    }()));\n\n    /**\n     * onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发，\n     * onpageshow 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发\n     */\n    window.addEventListener('pageshow', (e) => {\n      /** @namespace e.persisted */\n      e.persisted && applyResponsePlan();\n    }, false);\n\n    /**\n     * 尝试加入 Hairline 标记, 用于处理 border 1px的问题\n     */\n    tryAddHairLine();\n  }());\n}(window, document, window.__META_FLEXIBLE__ = window.__META_FLEXIBLE__ || {}));\n"],"names":["window","document","apiMetaFlexibleOptions","invariant","condition","message","Error","LOG_PREFIX","warn","invariantMetaViewPoint","getMetaViewpointElement","querySelector","setBodyFontSize","body","style","fontSize","dpr","addEventListener","createOrUpdateMetaViewpoint","metaViewpoint","content","metaViewpointElement","createElement","setAttribute","headElement","docEl","appendChild","wrap","write","innerHTML","implementPlan","currentPlan","Plan","TargetDensityDpi","ScaleRatio","targetDensityDpiImpl","scaleRatioImpl","width","screen","scale","designViewpoint","tryAddHairLine","fakeBody","testElement","border","offsetHeight","classList","add","removeChild","hasPlanImpact","action","clientWidthBeforeMeta","clientWidth","clientWidthAfterMeta","getScreenWidth","Impact","Unknown","No","Yes","defaultMetaFlexibleOptions","test","navigator","userAgent","metaFlexibleOptions","getMetaViewpointTargetDensityDpiContent","getMetaViewpointScaleRatioContent","NAMESPACE","namespace","documentElement","devicePixelRatio","plans","setMetaViewpointTargetDensityDpi","isAppended","setMetaViewpointScaleRatio","applyResponsePlan","hasImpact","length","shift","enableBodyFontSize","isMobile","timeoutId","setTimeout","e","persisted","__META_FLEXIBLE__"],"mappings":"gUAAC,SAAUA,EAAQC,EAAUC,WA4FlBC,GAAUC,EAAWC,OACvBD,OACG,IAAIE,OAASC,OAAeF,WAS7BG,GAAKJ,EAAWC,GAClBD,WAEKI,KAAQD,OAAeF,WAO1BI,QACsBC,IACI,0EAM1BA,WACAT,GAASU,cAAc,iCAMvBC,KACHX,EAASY,OACFA,KAAKC,MAAMC,SAAY,GAAKC,EAAO,OAEnCC,iBAAiB,mBAAoBL,WAUzCM,GAA4BC,EAAeC,OAC7BD,EAGd,KACAA,EAAe,IACZE,GAAuBX,GACxBW,KAIaA,KAHApB,EAASqB,cAAc,UACzBC,aAAa,OAAQ,eAKzBA,aAAa,UAAWH,MAChCI,GAAcC,EAAMd,cAAc,WACpCa,IACUE,YAAYP,OACnB,IACCQ,GAAO1B,EAASqB,cAAc,SAC/BI,YAAYP,KACRS,MAAMD,EAAKE,mBAlBRN,aAAa,UAAWH,SAqBjCD,WAkFAW,GAAcC,UACbA,OACDC,GAAKC,+BAGLD,GAAKE,gCAIE,iCAAsCH,YAO7CI,iBAOAC,QACDC,GAAQrC,EAAOsC,OAAOD,MACxBE,EAAQF,EAAQG,IACZ,IAAMD,EAAQ,KACKA,WAMpBE,QACHzB,GAAO,EAAG,IACN0B,GAAWzC,EAASqB,cAAc,QAClCqB,EAAc1C,EAASqB,cAAc,SAC/BR,MAAM8B,OAAS,2BAClBlB,YAAYiB,KACfjB,YAAYgB,GACe,IAA7BC,EAAYE,gBACRC,UAAUC,IAAI,eAEhBC,YAAYN,YAQbO,GAAcC,MACfC,GAAwB1B,EAAM2B,mBAE9BC,GAAuB5B,EAAM2B,kBAC/BE,OAAqBd,EAChBe,EAAOC,QAETH,IAAyBF,EAAwBI,EAAOE,GAAKF,EAAOG,YAOpEJ,WACAtD,GAAOsC,OAAOD,SAtTjBL,qBACc,aACN,GAMRuB,OACC,MACA,UACI,GAOLI,aACO,gCACM,4CACwB,SAACnB,kBAA6BA,4GACpC,SAACD,8CAA+CA,qBAAwBA,qBAAwBA,qDACzH,kFAAuEqB,KAAKC,UAAUC,mBACxF9B,EAAKC,iBAAkBD,EAAKE,uCAEhB,GAOhB6B,OAA0BJ,EAA+BzD,GAKzD8D,EAA0CD,EAAoBC,wCAO9DC,EAAoCF,EAAoBE,kCAMxDC,EAAYH,EAAoBI,UAMhC5D,EAAa2D,EAMb1B,EAAkBuB,EAAoBvB,gBAMtCf,EAAQxB,EAASmE,gBAOjBpD,EAAMhB,EAAOqE,kBAAoB,EAKjCC,GAAStC,EAAKC,iBAAkBD,EAAKE,YAuFrCqC,EAAoC,cACpCC,IAAa,QACV,YACAA,UACyB,GAAQR,EAAwCxB,OAC/D,OAQbiC,EAA8B,cAC9BtD,gBACG,UAACoB,KACUrB,EAA4BC,EAAe8C,EAAkC1B,QAO3FmC,EAAqB,cAIrBtB,UAIAuB,EAAYpB,EAAOE,SAChB,eACDL,IAAgB3B,EAAM2B,YAAa,MACvB3B,EAAM2B,YAIhBuB,IAAcpB,EAAOG,kBAITY,EAAM,SAGfK,IAAcpB,EAAOE,IAAI,IAI1Ba,EAAMM,QAAU,EAAG,YACV,iBAAMzE,IAAU,EAAU+D,6BAAoC,WAM/DjB,EAAc,iBAAMnB,GAAcwC,EAAM,MAIhDK,IAAcpB,EAAOE,MACjBoB,YAOItB,EAAOC,UAAYmB,EAAYpB,EAAOE,wBA+EjDqB,GAAgCf,EAAhCe,wBAEFC,EAFkChB,EAAZgB,2BAGpB,eAAoBb,OASvBY,aAcG7D,iBAAiB,SAAW,cAC7B+D,gBACG,yBACQA,KACDC,WAAWP,EAAmB,YAQvCzD,iBAAiB,WAAY,SAACiE,KAEjCC,WAAaT,MACd,WAOL1E,OAAQC,SAAUD,OAAOoF,kBAAoBpF,OAAOoF"}