{"version":3,"file":"meta-flexible.min.js","sources":["../src/index.js"],"sourcesContent":["(function(window, document, apiMetaFlexibleOptions) {\n  /**\n   * 标记版本, 自动生成版本号\n   * @type {string}\n   */\n  apiMetaFlexibleOptions.version = '<@VERSION@>';\n\n  /**\n   * 方案枚举\n   */\n  const Plan = {\n    TargetDensityDpi: 0,\n    ScaleRatio: 1,\n    Rem: 2,\n    Viewpoint: 3\n  };\n\n  /**\n   * 是否有生效, 用于判断当前方案是否真正生效\n   */\n  const Impact = {\n    Yes: 1,\n    No: -1,\n    Unknown: 0\n  };\n\n  /**\n   * 默认options, 当前client属性为保留字段, 可接受 'pc' | 'mobile'\n   * @type {{enableBodyFontSize: boolean, enableViewpointFitForIphoneX: boolean, disableReportPlanNotWorkingErrorOnce: boolean, Plan: {ScaleRatio: number, Viewpoint: number, Rem: number, TargetDensityDpi: number}, designViewpoint: number, remUpperResizeLimit: number, plans: number[], namespace: string, client: undefined, getMetaViewpointScaleRatioContent(*, *=): string, isMobile: (function(): boolean), remRatio: number, getMetaViewpointTargetDensityDpiContent(*, *=): string}}\n   */\n  const defaultMetaFlexibleOptions = {\n    /**\n     * 日志命名空间\n     */\n    namespace: 'meta-flexible',\n    /**\n     * 根据设计稿大小设置即可\n     */\n    designViewpoint: 750,\n    /**\n     * meta viewpoint content, 细节请参考返回值\n     * @param designViewpoint\n     * @param enableViewpointFitForIphoneX\n     * @return {string}\n     */\n    getMetaViewpointTargetDensityDpiContent(designViewpoint, enableViewpointFitForIphoneX) {\n      return [\n        `width=${designViewpoint}`,\n        'target-densitydpi=device-dpi',\n        'user-scalable=no',\n        enableViewpointFitForIphoneX && 'viewport-fit=cover',\n      ].filter(Boolean).join(', ');\n    },\n    /**\n     * meta viewpoint content, 细节请参考返回值\n     * @param scale\n     * @param enableViewpointFitForIphoneX\n     * @return {string}\n     */\n    getMetaViewpointScaleRatioContent(scale, enableViewpointFitForIphoneX) {\n      return [\n        'width=device-width',\n        'initial-scale=1',\n        `maximum-scale=${scale}`,\n        `minimum-scale=${scale}`,\n        'user-scalable=no',\n        enableViewpointFitForIphoneX && 'viewport-fit=cover'\n      ].filter(Boolean).join(', ');\n    },\n    /**\n     * 判断是否是移动端\n     * @return {boolean}\n     */\n    isMobile: () => /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),\n    /**\n     * 降级方案顺序\n     */\n    plans: [Plan.TargetDensityDpi, Plan.ScaleRatio],\n    /**\n     * 方案枚举\n     */\n    Plan,\n    /**\n     * 是否设置body字体\n     */\n    enableBodyFontSize: false,\n    /**\n     * 是否开启viewpoint fit\n     */\n    enableViewpointFitForIphoneX: false,\n    /**\n     * rem 比例\n     */\n    remRatio: 10,\n    /**\n     * rem最大上限, 通过设置该字段防止页面无限放大\n     */\n    remUpperResizeLimit: 540,\n    /**\n     * 标记当前客户端, 参考值 pc | mobile\n     */\n    client: undefined,\n    /**\n     * 禁止 ReportPlanNotWorkingErrorOnce\n     */\n    disableReportPlanNotWorkingErrorOnce: true\n  };\n\n  /**\n   * 合并外部API Options\n   * @type {{(*, *=): *, (*, *=): *, enableBodyFontSize: boolean, designViewpoint: number, remUpperResizeLimit: number, plans: *[], enableViewpointFitForIphoneX: boolean, namespace: string, client: undefined, getMetaViewpointScaleRatioContent, isMobile: (function(): boolean), Plan: {TargetDensityDpi: number, ScaleRatio: number, Rem: number, Viewpoint: number}, remRatio: number, getMetaViewpointTargetDensityDpiContent, disableReportPlanNotWorkingErrorOnce: boolean}}\n   */\n  const metaFlexibleOptions = { ...defaultMetaFlexibleOptions, ...apiMetaFlexibleOptions };\n\n  /**\n   * 拉取 meta TargetDensityDpiContent 模板\n   */\n  const getMetaViewpointTargetDensityDpiContent = metaFlexibleOptions.getMetaViewpointTargetDensityDpiContent;\n\n  /**\n   * 拉取 meta ScaleRatio 模板\n   * @param scale\n   * @returns {string}\n   */\n  const getMetaViewpointScaleRatioContent = metaFlexibleOptions.getMetaViewpointScaleRatioContent;\n\n  /**\n   * 命名空间\n   * @type {string}\n   */\n  const NAMESPACE = metaFlexibleOptions.namespace;\n\n  /**\n   * 错误前缀\n   * @type {string}\n   */\n  const LOG_PREFIX = NAMESPACE;\n\n  /**\n   * 设计稿大小\n   * @type {number}\n   */\n  const designViewpoint = metaFlexibleOptions.designViewpoint;\n\n  /**\n   * 是否启用viewpoint fit, 该属性仅对iphone-x生效\n   * @type {boolean}\n   */\n  const enableViewpointFitForIphoneX = metaFlexibleOptions.enableViewpointFitForIphoneX;\n\n  /**\n   * 拉取 document 元素\n   * @type {Element}\n   */\n  const docEl = document.documentElement;\n\n  // noinspection JSUnresolvedVariable\n  /**\n   * 判断当前 window dpr 比例，若无直接降级使用 1\n   * @type {*|number}\n   */\n  const dpr = window.devicePixelRatio || 1;\n\n  /**\n   * plan 列表\n   */\n  const plans = metaFlexibleOptions.plans;\n\n  /**\n   * rem的基准值, 如 remRatio = 10, 即在750px设计稿中, 1rem = 75px\n   */\n  const remRatio = metaFlexibleOptions.remRatio;\n\n  /**\n   * rem 页面宽度变化最大上限, 当大于 remUpperResizeLimit, 根节点 font-size 将不再变化\n   */\n  const remUpperResizeLimit = metaFlexibleOptions.remUpperResizeLimit;\n\n  /**\n   * 禁止 ReportPlanNotWorkingErrorOnce\n   */\n  const disableReportPlanNotWorkingErrorOnce = metaFlexibleOptions.disableReportPlanNotWorkingErrorOnce;\n\n  /**\n   * 条件判错函数\n   * @param condition 错误条件\n   * @param message\n   */\n  function invariant(condition, message) {\n    if (!condition) {\n      throw new Error(`${LOG_PREFIX}: ${message}`);\n    }\n  }\n\n  /**\n   * 条件警告函数\n   * @param condition 警告条件\n   * @param message 警告信息\n   */\n  function warn(condition, message) {\n    if (!condition) {\n      // eslint-disable-next-line no-console\n      console.warn(`${LOG_PREFIX}: ${message}`);\n    }\n  }\n\n  /**\n   * 判定页面中是否已经被手动设置 meta\n   */\n  function invariantMetaViewPoint() {\n    const metaViewPointElement = getMetaViewpointElement();\n    invariant(!metaViewPointElement, '在使用当前工具库时请勿使用自定义viewpoint meta. viewpoint meta 将会通过当前工具自动计算生成.');\n  }\n\n  /**\n   * 获取 meta viewpoint\n   */\n  function getMetaViewpointElement() {\n    return document.querySelector('meta[name=\"viewport\"]');\n  }\n\n  /**\n   * 设置 body 字体大小, 来自原本的 lib-flexible 源码, 作用暂未知\n   */\n  function setBodyFontSize() {\n    if (document.body) {\n      document.body.style.fontSize = (12 * dpr) + 'px';\n    } else {\n      document.addEventListener('DOMContentLoaded', setBodyFontSize);\n    }\n  }\n\n  /**\n   * 创建或更新 meta view point\n   * @param metaViewpoint {Element} - 如果传入的 metaViewpoint已经存在, 则直接更新即可\n   * @param content {String} - viewpoint 内容\n   * @returns {*}\n   */\n  function createOrUpdateMetaViewpoint(metaViewpoint, content) {\n    const isAppended = !!metaViewpoint;\n    if (isAppended) {\n      metaViewpoint.setAttribute('content', content);\n    } else {\n      const metaViewpointElement = getMetaViewpointElement();\n      if (!metaViewpointElement) {\n        metaViewpoint = document.createElement('meta');\n        metaViewpoint.setAttribute('name', 'viewport');\n      } else {\n        metaViewpoint = metaViewpointElement;\n      }\n      metaViewpoint.setAttribute('content', content);\n      const headElement = docEl.querySelector('head');\n      if (headElement) {\n        headElement.appendChild(metaViewpoint);\n      } else {\n        const wrap = document.createElement('div');\n        wrap.appendChild(metaViewpoint);\n        document.write(wrap.innerHTML);\n      }\n    }\n    return metaViewpoint;\n  }\n\n  /**\n   * 设置 targetDensityDpi meta\n   */\n  const setMetaViewpointTargetDensityDpi = (() => {\n    let isAppended = false;\n    let orientationChangeCounter = 0;\n    /**\n     * 处理在 ios iphone 6 (可能也涉及其他机型), 在翻转手机后当值 targetdensity 方案失效, window.innerWidth 异常, 不等于 designViewpoint\n     */\n    window.addEventListener('orientationchange', () => {\n      /**\n       * 且这个行为发生在翻转过程的某一个时间点, 所以需要等待若干时间, 目前测试等待setTimeout时间, 100 (无效), 150 (偶然), 200(可用), 250(较稳)\n       * 但不确定是否可能在性能低的时候翻转时间延长导致失效\n       */\n      setTimeout(() => {\n        if (window.innerWidth !== designViewpoint) {\n          orientationChangeCounter++;\n          if (orientationChangeCounter > 5) {\n            orientationChangeCounter = 0;\n          }\n          createOrUpdateMetaViewpoint(void 0, getMetaViewpointTargetDensityDpiContent(designViewpoint + orientationChangeCounter / 1000, enableViewpointFitForIphoneX));\n        }\n      }, 250);\n    });\n    return () => {\n      if (!isAppended) {\n        createOrUpdateMetaViewpoint(void 0, getMetaViewpointTargetDensityDpiContent(designViewpoint, enableViewpointFitForIphoneX));\n        isAppended = true;\n      }\n    };\n  })();\n\n  /**\n   * 设置 targetDensityDpi meta\n   */\n  const setMetaViewpointScaleRatio = (() => {\n    let metaViewpoint;\n    /**\n     * 缓存先前scale值\n     */\n    let prevScale;\n    return (scale) => {\n      if (prevScale !== scale) {\n        prevScale = scale;\n        metaViewpoint = createOrUpdateMetaViewpoint(metaViewpoint, getMetaViewpointScaleRatioContent(scale, enableViewpointFitForIphoneX));\n      }\n    };\n  })();\n\n  /**\n   * 上报错误, 异步抛异常, 用于上报\n   */\n  const reportPlanNotWorkingErrorOnce = (() => {\n    const hasReported = false;\n    return () => {\n      const errorMessage = `${NAMESPACE}所使用的所有方案失效, 暂用最后一种方案兜底`;\n      if (!disableReportPlanNotWorkingErrorOnce) {\n        if (!hasReported) {\n          setTimeout(() => invariant(false, errorMessage), 0);\n        }\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn(errorMessage);\n      }\n    };\n  })();\n\n  /**\n   * 应用响应式方案\n   */\n  const applyResponsePlan = (() => {\n    /**\n     * 客户端长度, 当判定长度一致时不进入该函数, 从而减少计算\n     */\n    let clientWidth;\n    /**\n     * 是否生效,默认情况下是No\n     */\n    let hasImpact = Impact.No;\n    /**\n     * 用于存储当前方案\n     */\n    let currentPlan;\n    return () => {\n      if (clientWidth !== docEl.clientWidth) {\n        clientWidth = docEl.clientWidth;\n        /**\n         * 如果已经发现当前方案已生效, 直接使用当前方案即可, 不再继续尝试后续方案\n         */\n        if (hasImpact === Impact.Yes) {\n          /**\n           * 第一个方案作为当前使用方案\n           */\n          implementPlan(currentPlan);\n          return;\n        }\n        if (plans.length === 0) {\n          implementPlan(currentPlan);\n          return;\n        }\n        while (hasImpact === Impact.No) {\n          if (plans[0] !== undefined) {\n            /**\n             * 指向当前方案\n             */\n            currentPlan = plans[0];\n          }\n          /**\n           * 如果所有方案失效, 直接抛异常, 用于上报, 但保留最后一种方案\n           */\n          if (plans.length <= 0) {\n            reportPlanNotWorkingErrorOnce();\n            break;\n          }\n          /**\n           * 是否有生效\n           */\n          hasImpact = hasPlanImpact(() => implementPlan(currentPlan));\n          /**\n           * 如果发现方案失效, 直接抛弃方案列表第一项\n           */\n          if (hasImpact === Impact.No) {\n            plans.shift();\n          }\n        }\n        /**\n         * 当是否生效是未知时, 如: 当前页面大小完全等于预设的值 (设计稿大小), 那么无法判断是否生效\n         * 当出现以上情况时, 重置 hasImpact = 无效, 让下一轮再次触发当前函数时在判定\n         */\n        hasImpact === Impact.Unknown && (hasImpact = Impact.No);\n      }\n    };\n  })();\n\n  /**\n   * 方案具体实现函数, 根据枚举选择方案\n   */\n  function implementPlan(currentPlan) {\n    switch (currentPlan) {\n      case Plan.TargetDensityDpi:\n        targetDensityDpiImpl();\n        break;\n      case Plan.ScaleRatio:\n        scaleRatioImpl();\n        break;\n      case Plan.Rem:\n        remImpl();\n        break;\n      case Plan.Viewpoint:\n        viewpointImpl();\n        break;\n      default:\n        invariant(false, `未知 meta-flexible 方案, plan = ${currentPlan}`);\n    }\n  }\n\n  /**\n   * rem 方案具体实现\n   */\n  function remImpl() {\n    setMetaViewpointScaleRatio(1);\n    refreshRem();\n  }\n\n  /**\n   * viewpoint 方案具体实现\n   */\n  function viewpointImpl() {\n    setMetaViewpointScaleRatio(1);\n    refreshRem(false);\n  }\n\n  /**\n   * 刷新Rem\n   * @param hasResizeLimit\n   */\n  function refreshRem(hasResizeLimit = true) {\n    let width = docEl.clientWidth;\n    if (hasResizeLimit) {\n      if (width > remUpperResizeLimit) {\n        width = remUpperResizeLimit;\n      }\n    }\n    const rem = width / remRatio;\n    docEl.style.fontSize = `${rem}px`;\n    apiMetaFlexibleOptions.rem = rem;\n  }\n\n  /**\n   * target density dpi 具体实现\n   */\n  function targetDensityDpiImpl() {\n    setMetaViewpointTargetDensityDpi();\n  }\n\n  /**\n   * target density dpi 具体实现\n   */\n  function scaleRatioImpl() {\n    const width = window.screen.width;\n    let scale = width / designViewpoint;\n    scale > 1 && (scale = 1);\n    setMetaViewpointScaleRatio(scale);\n  }\n\n  /**\n   * 检查发现支持0.5px\n   */\n  function tryAddHairLine() {\n    if (dpr >= 2) {\n      const fakeBody = document.createElement('body');\n      const testElement = document.createElement('div');\n      testElement.style.border = '.5px solid transparent';\n      fakeBody.appendChild(testElement);\n      docEl.appendChild(fakeBody);\n      if (testElement.offsetHeight === 1) {\n        docEl.classList.add('hairlines');\n      }\n      docEl.removeChild(fakeBody);\n    }\n  }\n\n  /**\n   * 方案是否有生效\n   * @param action\n   */\n  function hasPlanImpact(action) {\n    const clientWidthBeforeMeta = docEl.clientWidth;\n    action();\n    const clientWidthAfterMeta = docEl.clientWidth;\n    if (getScreenWidth() === designViewpoint) {\n      return Impact.Unknown;\n    }\n    return clientWidthAfterMeta === clientWidthBeforeMeta ? Impact.No : Impact.Yes;\n  }\n\n  /**\n   * 获取当前屏幕宽度\n   * @returns {Number}\n   */\n  function getScreenWidth() {\n    return window.screen.width;\n  }\n\n  (function() {\n\n    const { enableBodyFontSize, isMobile } = metaFlexibleOptions;\n\n    if (!isMobile()) {\n      warn(false, `请确保在移动端下使用${NAMESPACE}`);\n      return;\n    }\n\n    /**\n     * 校验判断 meta viewpoint, 禁止开发者手动添加\n     */\n    invariantMetaViewPoint();\n\n    if (enableBodyFontSize) {\n      /**\n       * 立即自执行, 设置 body font size\n       */\n      setBodyFontSize();\n    }\n    /**\n     * 直接触发页面\n     */\n    applyResponsePlan();\n\n    /**\n     * 在页面大小变更时触发更新\n     */\n    window.addEventListener('resize', (function() {\n      let timeoutId;\n      return () => {\n        clearTimeout(timeoutId);\n        timeoutId = setTimeout(applyResponsePlan, 300);\n      };\n    }()));\n\n    /**\n     * onpageshow 事件类似于 onload 事件，onload 事件在页面第一次加载时触发，\n     * onpageshow 事件在每次加载页面时触发，即 onload 事件在页面从浏览器缓存中读取时不触发\n     */\n    window.addEventListener('pageshow', (e) => {\n      /** @namespace e.persisted */\n      e.persisted && applyResponsePlan();\n    }, false);\n\n    /**\n     * 尝试加入 Hairline 标记, 用于处理 border 1px的问题\n     */\n    tryAddHairLine();\n  }());\n}(window, document, window.__META_FLEXIBLE__ = window.__META_FLEXIBLE__ || {}));\n"],"names":["window","document","apiMetaFlexibleOptions","invariant","condition","message","Error","LOG_PREFIX","warn","invariantMetaViewPoint","getMetaViewpointElement","querySelector","setBodyFontSize","body","style","fontSize","dpr","addEventListener","createOrUpdateMetaViewpoint","metaViewpoint","content","metaViewpointElement","createElement","setAttribute","headElement","docEl","appendChild","wrap","write","innerHTML","implementPlan","currentPlan","Plan","TargetDensityDpi","ScaleRatio","Rem","Viewpoint","remImpl","viewpointImpl","refreshRem","hasResizeLimit","width","clientWidth","remUpperResizeLimit","rem","remRatio","targetDensityDpiImpl","scaleRatioImpl","screen","scale","designViewpoint","tryAddHairLine","fakeBody","testElement","border","offsetHeight","classList","add","removeChild","hasPlanImpact","action","clientWidthBeforeMeta","clientWidthAfterMeta","getScreenWidth","Impact","Unknown","No","Yes","version","defaultMetaFlexibleOptions","enableViewpointFitForIphoneX","filter","Boolean","join","test","navigator","userAgent","undefined","metaFlexibleOptions","getMetaViewpointTargetDensityDpiContent","getMetaViewpointScaleRatioContent","NAMESPACE","namespace","documentElement","devicePixelRatio","plans","disableReportPlanNotWorkingErrorOnce","setMetaViewpointTargetDensityDpi","isAppended","orientationChangeCounter","innerWidth","setMetaViewpointScaleRatio","prevScale","reportPlanNotWorkingErrorOnce","errorMessage","applyResponsePlan","hasImpact","length","shift","enableBodyFontSize","isMobile","timeoutId","setTimeout","e","persisted","__META_FLEXIBLE__"],"mappings":"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"}